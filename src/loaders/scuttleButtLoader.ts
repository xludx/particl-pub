import { MicroframeworkLoader, MicroframeworkSettings } from 'microframework-w3tec';

import { env } from '../env';
import * as path from 'path';
import * as _ from 'lodash';
// import * as DHT from 'multiserver-dht';
import * as ssbKeys from 'ssb-keys';
import * as scuttlebot from 'scuttlebot';
import * as fs from 'fs';

import nonPrivate from 'non-private-ip';
import home from 'os-homedir';
import { Logger } from '../lib/logger';

export const scuttleButtLoader: MicroframeworkLoader = async (settings: MicroframeworkSettings | undefined) => {

    const log = new Logger(__filename);
    const SEC = 1e3;
    const MIN = 60 * SEC;
    const HOME = home() || 'browser'; // most probably browser
    const name = 'particl-pub';

    if (settings && env.scuttlebutt.enabled) {

        const config = {
            // just use an ipv4 address by default.
            // there have been some reports of seemingly non-private
            // ipv6 addresses being returned and not working.
            // https://github.com/ssbc/scuttlebot/pull/102
            party: true,
            host: nonPrivate.v4 || '',
            port: 8008,
            blobsPort: 8989, // matches ssb-ws
            timeout: 0,
            pub: true,
            local: true,
            friends: {
                dunbar: 150,
                hops: 2 // down from 3
            },
            ws: {
                port: 8989
            },
            gossip: {
                connections: 3
            },
            connections: { // to support DHT invites
                incoming: {
                    // dht: [{ scope: 'public', transform: 'shs', port: 8423 }],
                    net: [{ scope: 'private', transform: 'shs', port: 8008 }]
                },
                outgoing: {
                    // dht: [{ transform: 'shs' }],
                    net: [{ transform: 'shs' }]
                }
            },
            path: path.join(HOME, '.' + name),
            timers: {
                connection: 0,
                reconnect: 5 * SEC,
                ping: 5 * MIN,
                handshake: 5 * SEC
            },
            // change these to make a test network that will not connect to the main network.
            caps: {
                // this is the key for accessing the ssb protocol.
                // this will be updated whenever breaking changes are made.
                // (see secret-handshake paper for a full explaination)
                // (generated by crypto.randomBytes(32).toString('base64'))
                shs: '1KHLiKZvAvjbY1ziZEHMXawbCEIM6qwjCDm3VYRan/s=',
                // used to sign messages
                sign: undefined
            },
            master: [],
            logging: { level: 'notice' },
            keys: undefined,
            remote: undefined,
            manifest: undefined
        };

        config.keys = ssbKeys.loadOrCreateSync(path.join(config.path, 'secret'));

        log.debug('config.path:', config);
        // fix offline on windows by specifying 127.0.0.1 instead of localhost (default)
        const id = config.keys.id;
        config.remote = `net:127.0.0.1:${config.port}~shs:${id.slice(1).replace('.ed25519', '')}`;

        /*
        function dhtTransport(sbot: any): void {
            sbot.multiserver.transport({
                name: 'dht',
                create: dhtConfig => {
                    return DHT({
                        keys: sbot.dhtInvite.channels(),
                        port: dhtConfig.port
                    });
                }
            });
        }
        */

        const createSbot = scuttlebot
            .use(require('scuttlebot/plugins/plugins'))
            .use(require('scuttlebot/plugins/master'))
            .use(require('scuttlebot/plugins/gossip'))
            // .use(require('@staltz/sbot-gossip'))    // A hacky fork of scuttlebot's gossip plugin to add multiserver-dht support
            .use(require('scuttlebot/plugins/replicate'))
            .use(require('ssb-friends'))
            .use(require('ssb-blobs'))
            .use(require('ssb-backlinks'))  // indexing all link mentions of messages
            .use(require('ssb-private'))    // indexed private messages
            // .use(require('ssb-dht-invite')) // shares connection invites via a Distributed Hash Table, must come before dhtTransport
            // .use(dhtTransport)
            .use(require('scuttlebot/plugins/invite'))
            .use(require('scuttlebot/plugins/local'))
            .use(require('scuttlebot/plugins/logging'))
            .use(require('ssb-query'))
            .use(require('ssb-search'))     // fulltext search as scuttlebot plugin
            .use(require('ssb-ws'))
            .use(require('ssb-tags'));       // indexing reduced "tags" state.
            // .use(require('ssb-ebt'))         // enable at your own risk!
            // .use(require('./sbot'));

        const context = {
            sbot: createSbot(config),
            config
        };

        config.manifest = context.sbot.getManifest();
        fs.writeFileSync(path.join(config.path, 'manifest.json'), JSON.stringify(config.manifest));

        // start dht invite support
        // context.sbot.dhtInvite.start();

        context.sbot.start();
    }
};
